#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef STORYLY_SWIFT_H
#define STORYLY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Storyly",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)





/// This data class represents the preview mode of stories.
typedef SWIFT_ENUM_NAMED(NSInteger, PlayMode, "PlayMode", open) {
/// This play mode continues to play all of the remaining story groups in the StorylyView
  PlayModeDefault = 0,
/// This play mode plays all of the remaining stories of the specified story group
  PlayModeStoryGroup = 1,
/// This play mode plays only the specified story
  PlayModeStory = 2,
};

@class STRCartItem;
@class NSNumber;
@class NSString;

/// This class represent Cart of Storyly
/// \param items List of STRCartItem objects representing the items added to the cart 
///
/// \param totalPrice A floating-point value indicating the current total price of all the items in the cart. 
///
/// \param oldTotalPrice  A floating-point value representing the old total price of all the items in the cart 
///
/// \param currency  A String value representing the currency of total prices 
///
SWIFT_CLASS_NAMED("STRCart")
@interface STRCart : NSObject
@property (nonatomic, readonly, copy) NSArray<STRCartItem *> * _Nonnull items;
@property (nonatomic, readonly) float totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
- (nonnull instancetype)initWithItems:(NSArray<STRCartItem *> * _Nonnull)items totalPrice:(float)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data class that represents the result of an event. It contains the following properties
/// \param message A string that holds a message or description associated with the event result
///
SWIFT_CLASS_NAMED("STRCartEventResult")
@interface STRCartEventResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductItem;

/// This class represents an individual item in the shopping cart
/// \param item An list of type STRProductItem representing the product associated with this cart item 
///
/// \param quantity An integer value indicating the quantity of this item added to the cart 
///
/// \param totalPrice An integer value representing the current total price of this item 
///
/// \param oldTotalPrice An integer value representing the old total price of this item 
///
SWIFT_CLASS_NAMED("STRCartItem")
@interface STRCartItem : NSObject
@property (nonatomic, readonly, strong) STRProductItem * _Nonnull item;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSNumber * _Nullable totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
- (nonnull instancetype)initWithItem:(STRProductItem * _Nonnull)item quantity:(NSInteger)quantity totalPrice:(NSNumber * _Nullable)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("STRConfig")
@interface STRConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum StorylyLayoutDirection : NSInteger;
@class StorylyProductConfig;
@class StorylyShareConfig;

SWIFT_CLASS_NAMED("Builder")
@interface STRConfigBuilder : NSObject
/// This function allows you to change the layout direction
/// \param direction StorylyLayoutDirection instance to set 
///
- (nonnull instancetype)setLayoutDirection:(enum StorylyLayoutDirection)direction SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set custom parameter for analytical purposes
/// \param parameter String? instance to set 
///
- (nonnull instancetype)setCustomParameter:(NSString * _Nullable)parameter SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set labels for analytical purposes
/// \param labels Set <String>? instance to set
///
- (nonnull instancetype)setLabels:(NSSet<NSString *> * _Nullable)labels SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set user specific information to fill the story/story group data
/// \param data [String String] instance to set
///
- (nonnull instancetype)setUserData:(NSDictionary<NSString *, NSString *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set IsTestMode which defines whether it is a test device or not. If true, test groups are sent from the server.
/// \param isTest Bool instance to set 
///
- (nonnull instancetype)setTestMode:(BOOL)isTest SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyProductConfig.
/// \param config StorylyProductConfig instance to set 
///
- (nonnull instancetype)setProductConfig:(StorylyProductConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyShareConfig.
/// \param config StorylyShareConfig instance to set 
///
- (nonnull instancetype)setShareConfig:(StorylyShareConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set localization to Storyly, sample convention is en-GB.
/// Current supported languages for sdk texts are: de, en, es, fr, he, pt, ru, tr
/// \param locale Locale for localization 
///
- (nonnull instancetype)setLocale:(NSString * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to play video stories muted which can enable playing
/// media of your app while watchig stories
/// \param isMuted true if you want to mute video stories 
///
- (STRConfigBuilder * _Nonnull)setMute:(BOOL)isMuted SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data class that represents the storyly product information
/// \param productId The unique identifier for the product. 
///
/// \param productGroupId The unique identifier for the product group. 
///
SWIFT_CLASS_NAMED("STRProductInformation")
@interface STRProductInformation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable productId;
@property (nonatomic, readonly, copy) NSString * _Nullable productGroupId;
- (nonnull instancetype)initWithProductId:(NSString * _Nullable)productId productGroupId:(NSString * _Nullable)productGroupId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductVariant;

/// Represents the storyly product
/// \param accountId Unique identifier of the account 
///
/// \param productId Unique identifier of the product 
///
/// \param productGroupId Unique identifier of the group which the product belongs 
///
/// \param title The title or name of the product 
///
/// \param url The URL associated with the product 
///
/// \param desc The description of the product 
///
/// \param price The original price of the product 
///
/// \param salesPrice The discounted price of the product 
///
/// \param currency The currency in which the price is specified 
///
/// \param imageUrls  A list of URLs pointing to the images associated with the product 
///
/// \param variants  A list of product variants, represented by instances of the STRProductVariant class 
///
SWIFT_CLASS_NAMED("STRProductItem")
@interface STRProductItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nonnull productGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly) float price;
@property (nonatomic, readonly, strong) NSNumber * _Nullable salesPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable imageUrls;
@property (nonatomic, readonly, copy) NSArray<STRProductVariant *> * _Nullable variants;
@property (nonatomic, readonly, copy) NSString * _Nullable ctaText;
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId productGroupId:(NSString * _Nonnull)productGroupId title:(NSString * _Nonnull)title url:(NSString * _Nonnull)url description:(NSString * _Nullable)description price:(float)price salesPrice:(NSNumber * _Nullable)salesPrice currency:(NSString * _Nonnull)currency imageUrls:(NSArray<NSString *> * _Nullable)imageUrls variants:(NSArray<STRProductVariant *> * _Nullable)variants ctaText:(NSString * _Nullable)ctaText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the variant of the storyly product
/// \param name The name or label of the variant can be changed based on localization 
///
/// \param value The value or specific option associated with the variant 
///
/// \param key Identifier of the variant, same with the xml tag of the variant in the product feed 
///
SWIFT_CLASS_NAMED("STRProductVariant")
@interface STRProductVariant : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value key:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("STRStoryStyling")
@interface STRStoryStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIFont;
@class UIColor;
@class UIImage;

SWIFT_CLASS_NAMED("Builder")
@interface STRStoryBuilder : NSObject
/// This function allows you to change the font of the header text
/// \param font UIFont instance to set 
///
- (nonnull instancetype)setTitleFont:(UIFont * _Nonnull)font SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the typeface of the font on the interactives
/// \param font UIFont instance to set 
///
- (nonnull instancetype)setInteractiveFont:(UIFont * _Nullable)font SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the progress bar colors of the view.
/// \param colors [UIColor] instance to set 
///
- (nonnull instancetype)setProgressBarColor:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the view header text
/// \param isVisible Bool instance to set 
///
- (nonnull instancetype)setTitleVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the view header close button
/// \param isVisible Bool instance to set 
///
- (nonnull instancetype)setCloseButtonVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the UIImage of the view header close button icon
/// \param icon UIImage? instance to set 
///
- (nonnull instancetype)setCloseButtonIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the UIImage of the view header share button icon
/// \param icon UIImage? instance to set 
///
- (nonnull instancetype)setShareButtonIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorylyVerticalFeedInit;
@class UIViewController;
@protocol StorylyVerticalFeedDelegate;
@protocol StorylyVerticalFeedProductDelegate;
@protocol StorylyAdViewProvider;
@class UIWindow;
@class NSCoder;

SWIFT_CLASS_NAMED("STRVerticalFeedView")
@interface STRVerticalFeedView : UIView
/// This property triggers STRVerticalFeedView initialization
@property (nonatomic, strong) StorylyVerticalFeedInit * _Nonnull storylyVerticalFeedInit;
/// RootviewController of the ReelsView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the ReelsView which will notify you when an event occurs in ReelsView.
@property (nonatomic, weak) id <StorylyVerticalFeedDelegate> _Nullable storylyVerticalFeedDelegate;
/// Delegate of the ReelsView which will notify you when an product related event occurs in ReelsView.
@property (nonatomic, weak) id <StorylyVerticalFeedProductDelegate> _Nullable storylyVerticalFeedProductDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyVerticalFeedAdViewProvider;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class NSURL;

@interface STRVerticalFeedView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to open using deeplink uri.
/// \param payload Intent data which includes reels as host
///
///
/// returns:
/// Success of the operation
- (BOOL)openStoryWithPayload:(NSURL * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
- (void)resumeVerticalFeedWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)pauseVerticalFeedWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)closeVerticalFeedWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to hydrate your products
/// \param products list of products to hydrate products
///
- (void)hydrateProductsWithProducts:(NSArray<STRProductItem *> * _Nonnull)products;
/// This function allows you to update your cart
/// \param cart A STRCart objects to update cart
///
- (void)updateCartWithCart:(STRCart * _Nonnull)cart;
/// This function allows you to open your custom external view
/// \param externalActionView External view to show
///
- (void)showExternalActionViewWithExternalActionView:(UIView * _Nonnull)externalActionView;
/// This function dismisses your already open external view
- (void)dismissExternalActionView;
@end

/// This enum class represents the share state of story.
typedef SWIFT_ENUM_NAMED(NSInteger, ShareType, "ShareType", open) {
/// Default type of Share State. Share is disabled
  ShareTypeDisabled = 0,
/// Share link
  ShareTypeLink = 1,
/// Share screen shot
  ShareTypeScreenshot = 2,
};

@class StoryComponent;

/// This data class represents a story inside a story group.
SWIFT_CLASS_NAMED("Story")
@interface Story : NSObject
/// ID of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Name of the story
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Index of the story among other stories of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story that shows whether the story is seen or not
@property (nonatomic, readonly) BOOL seen;
/// Time of the story that user watched
@property (nonatomic, readonly) NSInteger currentTime;
/// URL of the preview image of the story
@property (nonatomic, copy) NSURL * _Nullable previewUrl;
/// List of story components in the story
@property (nonatomic, readonly, copy) NSArray<StoryComponent *> * _Nullable storyComponentList;
/// URL which the user has just interacted with
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// Related product content of interactive incase of click action
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable actionProducts;
/// Story initialization
/// \param id ID of the story
///
/// \param index Index of the story among other stories of the story group
///
/// \param title Title of the story
///
/// \param name Name of the story
///
/// \param seen State of the story that shows whether the story is seen or not
///
/// \param currentTime Time of the story that user watched
///
/// \param previewUrl URL of the preview image of the story
///
/// \param storyComponentList List of story components in the story
///
/// \param actionUrl URL which the user has just interacted with
///
/// \param products Related product content of interactive incase of click action
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id index:(NSInteger)index title:(NSString * _Nonnull)title name:(NSString * _Nullable)name seen:(BOOL)seen currentTime:(NSInteger)currentTime previewUrl:(NSURL * _Nullable)previewUrl storyComponentList:(NSArray<StoryComponent *> * _Nullable)storyComponentList actionUrl:(NSString * _Nullable)actionUrl actionProducts:(NSArray<STRProductItem *> * _Nullable)actionProducts OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum StoryComponentType : NSInteger;

/// This parent class represents the interactive components which users are interacted with.
SWIFT_CLASS_NAMED("StoryComponent")
@interface StoryComponent : NSObject
/// Id of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Type of the interactive component
@property (nonatomic, readonly) enum StoryComponentType type;
/// Custom payload for the interactive component if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Button component.
SWIFT_CLASS_NAMED("StoryButtonComponent")
@interface StoryButtonComponent : StoryComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// StoryButtonComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for button component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Comment component.
SWIFT_CLASS_NAMED("StoryCommentComponent")
@interface StoryCommentComponent : StoryComponent
/// Comment text that the user sent
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryCommentComponent initialization
/// \param id Id of the interactive component
///
/// \param text Comment text that the user sent
///
/// \param customPayload Custom payload for Comment component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end



/// This enum represents the type of the interactive components.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryComponentType, "StoryComponentType", open) {
/// Undefined component type
  StoryComponentTypeUndefined = 0,
/// Denotes the type of the component is Quiz
  StoryComponentTypeQuiz = 1,
/// Denotes the type of the component is Poll
  StoryComponentTypePoll = 2,
/// Denotes the type of the component is Emoji
  StoryComponentTypeEmoji = 3,
/// Denotes the type of the component is Rating
  StoryComponentTypeRating = 4,
/// Denotes the type of the component is PromoCode
  StoryComponentTypePromoCode = 5,
/// Denotes the type of the component is SwipeAction
  StoryComponentTypeSwipeAction = 6,
/// Denotes the type of the component is ButtonAction
  StoryComponentTypeButtonAction = 7,
/// Denotes the type of the component is Text
  StoryComponentTypeText = 8,
/// Denotes the type of the component is Image
  StoryComponentTypeImage = 9,
/// Denotes the type of the component is Countdown
  StoryComponentTypeCountdown = 10,
/// Denotes the type of the component is ProductTag
  StoryComponentTypeProductTag = 11,
/// Denotes the type of the component is ProductCard
  StoryComponentTypeProductCard = 12,
/// Denotes the type of the component is ProductList
  StoryComponentTypeProductCatalog = 13,
/// Denotes the type of the component is Comment
  StoryComponentTypeComment = 14,
/// Denotes the type of the component is Video
  StoryComponentTypeVideo = 15,
/// Denotes the type of the component is LongVideo
  StoryComponentTypeLongVideo = 16,
/// Denotes the type of the component is Link CTA
  StoryComponentTypeLinkCTA = 17,
/// Denotes the type of the component is Image Quiz
  StoryComponentTypeImageQuiz = 18,
};


/// This class does the enum to string conversion of the Story Component
SWIFT_CLASS_NAMED("StoryComponentTypeHelper")
@interface StoryComponentTypeHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storyComponentNameWithComponentType:(enum StoryComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Emoji component.
SWIFT_CLASS_NAMED("StoryEmojiComponent")
@interface StoryEmojiComponent : StoryComponent
/// List of the emojis in the component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojiCodes;
/// Emoji index that the user selected
@property (nonatomic, readonly) NSInteger selectedEmojiIndex;
/// StoryEmojiComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCodes List of the emojis in the component
///
/// \param selectedEmojiIndex Emoji index that the user selected
///
/// \param customPayload Custom payload for this emoji if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCodes:(NSArray<NSString *> * _Nonnull)emojiCodes selectedEmojiIndex:(NSInteger)selectedEmojiIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

enum StoryGroupType : NSInteger;
@class StoryGroupStyle;

/// This class represents a story group in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroup")
@interface StoryGroup : NSObject
/// ID of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// URL of the story group icon image
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URL of the story group icon video
@property (nonatomic, readonly, copy) NSURL * _Nullable iconVideoUrl;
/// URL of the story group icon video thumbnail
@property (nonatomic, readonly, copy) NSURL * _Nullable iconVideoThumbnailUrl;
/// Order index of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story group that shows whether all of the stories are seen or not
@property (nonatomic, readonly) BOOL seen;
/// List of stories in the story group
@property (nonatomic, readonly, copy) NSArray<Story *> * _Nonnull stories;
/// Pin status of the story group that shows whether group is pinned or not
@property (nonatomic, readonly) BOOL pinned;
/// Type of the story group
@property (nonatomic, readonly) enum StoryGroupType type;
/// Style of this group
@property (nonatomic, readonly, strong) StoryGroupStyle * _Nullable style;
/// Name of this group
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Denotes whether story group is nudge or not
@property (nonatomic, readonly) BOOL nudge;
/// StoryGroup initialization
/// \param id ID of the story group
///
/// \param title Title of the story group
///
/// \param iconUrl URL of the story group icon image
///
/// \param thematicIconUrls URLs of different the story group icon themes
///
/// \param index Order index of the story group
///
/// \param seen State of the story group that shows whether all of the stories are seen or not
///
/// \param stories List of stories in the story group
///
/// \param pinned Pin status of the story group that shows whether group is pinned or not
///
/// \param type Type of the story group
///
/// \param style Style of this group
///
/// \param name Name of this group
///
/// \param nudge Denotes whether story group is nudge or not
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title iconUrl:(NSURL * _Nullable)iconUrl iconVideoUrl:(NSURL * _Nullable)iconVideoUrl iconVideoThumbnailUrl:(NSURL * _Nullable)iconVideoThumbnailUrl index:(NSInteger)index seen:(BOOL)seen stories:(NSArray<Story *> * _Nonnull)stories pinned:(BOOL)pinned type:(enum StoryGroupType)type style:(StoryGroupStyle * _Nullable)style name:(NSString * _Nullable)name nudge:(BOOL)nudge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This enum class represents available animations that can be set for customization.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupAnimation, "StoryGroupAnimation", open) {
/// Disables animation
  StoryGroupAnimationDisabled = 0,
/// Default animation
  StoryGroupAnimationBorderRotation = 1,
};


/// This class represents a story group’s badge style in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroupBadgeStyle")
@interface StoryGroupBadgeStyle : NSObject
/// Text value of the story group’s badge
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Text color value of the story group’s badge
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
/// Background color value of the story group’s badge
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// End time of the badge in timestamp format
@property (nonatomic, readonly, strong) NSNumber * _Nullable endTime;
/// Text template for the badge timestamp format
@property (nonatomic, readonly, copy, getter=template) NSString * _Nullable template_;
/// StoryGroupStyle initialization
/// \param badge Badge value of the story group
///
- (nonnull instancetype)initWithText:(NSString * _Nullable)text textColor:(UIColor * _Nullable)textColor backgroundColor:(UIColor * _Nullable)backgroundColor endTime:(NSNumber * _Nullable)endTime template:(NSString * _Nullable)template_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This enum represents orientation of story group list
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupListOrientation, "StoryGroupListOrientation", open) {
/// Horizontal orientation of story group list
  StoryGroupListOrientationHorizontal = 0,
/// Vertical orientation of story group list
  StoryGroupListOrientationVertical = 1,
};

/// This enum represents available story group sizes that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupSize, "StoryGroupSize", open) {
/// Small group size which is the samllest and does not have story group text
  StoryGroupSizeSmall = 0,
/// Large group size which is the default group size of the Storyly
  StoryGroupSizeLarge = 1,
/// Custom group size which has customizable features
  StoryGroupSizeCustom = 2,
};


/// This class represents a story group’s style in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroupStyle")
@interface StoryGroupStyle : NSObject
/// Story Group’s Borders’ unseen color list of the story group
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable borderUnseenColors;
/// Story Group’s Text’s unseen color of the story group
@property (nonatomic, readonly, strong) UIColor * _Nullable textUnseenColor;
/// Badge value of the story group
@property (nonatomic, readonly, strong) StoryGroupBadgeStyle * _Nullable badge;
/// StoryGroupStyle initialization
/// \param badge Badge value of the story group
///
- (nonnull instancetype)initWithBorderUnseenColors:(NSArray<UIColor *> * _Nullable)borderUnseenColors textUnseenColor:(UIColor * _Nullable)textUnseenColor badge:(StoryGroupBadgeStyle * _Nullable)badge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This enum class represents the type of the story group.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupType, "StoryGroupType", open) {
/// Default type for the story group type
  StoryGroupTypeDefault = 0,
/// Denotes story group type is Ad
  StoryGroupTypeAd = 1,
/// Denotes story group type is Live
  StoryGroupTypeLive = 2,
/// Denotes story group type is Product
  StoryGroupTypeAutomatedShoppable = 3,
};


/// This class defines the parent class of the custom styling StoryGroupView classes
SWIFT_CLASS_NAMED("StoryGroupView")
@interface StoryGroupView : UIView
/// This function fills the StoryGroupView components
- (void)populateView:(StoryGroup * _Nullable)storyGroup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol defines the structure of StoryGroupViewFactory
SWIFT_PROTOCOL_NAMED("StoryGroupViewFactory")
@protocol StoryGroupViewFactory
/// This function is called when a new view is requested
- (StoryGroupView * _Nonnull)createView SWIFT_WARN_UNUSED_RESULT;
/// This function is called when the size of the StoryGroupView is requested
- (CGSize)getSize SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents the Image Quiz component.
SWIFT_CLASS_NAMED("StoryImageQuizComponent")
@interface StoryImageQuizComponent : StoryComponent
/// Title of the image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of texts of the options if exists, otherwise list of image urls of image quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// StoryImageQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the image quiz if exists
///
/// \param options List of texts of the options if exists, otherwise list of image urls of image quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this image quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nullable)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Poll component.
SWIFT_CLASS_NAMED("StoryPollComponent")
@interface StoryPollComponent : StoryComponent
/// Title of the poll if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the poll
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// StoryPollComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the poll if exists
///
/// \param options List of options in the poll
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this poll if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class defines the structure of StorylyPriceConverter
SWIFT_PROTOCOL_NAMED("StoryPriceFormatter")
@protocol StoryPriceFormatter
/// This function format price and currency symbol
/// @param price Represents the numerical value of the price
/// @param currency Represents the currency symbol
- (NSString * _Nullable)format:(NSNumber * _Nullable)price :(NSString * _Nonnull)currency SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents the ProductCard component.
SWIFT_CLASS_NAMED("StoryProductCardComponent")
@interface StoryProductCardComponent : StoryComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// StoryProductCardComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for ProductCard component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the ProductCatalog component.
SWIFT_CLASS_NAMED("StoryProductCatalogComponent")
@interface StoryProductCatalogComponent : StoryComponent
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable actionUrlList;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// StoryProductCatalogComponent initialization
/// \param id Id of the interactive component
///
/// \param actionUrlLList action url list assigned to the interactive component
///
/// \param customPayload Custom payload for ProductCatalog component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id actionUrlList:(NSArray<NSString *> * _Nullable)actionUrlList products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the ProductTag component.
SWIFT_CLASS_NAMED("StoryProductTagComponent")
@interface StoryProductTagComponent : StoryComponent
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// StoryProductTagComponent initialization
/// \param id Id of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for ProductTag component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the PromoCode component.
SWIFT_CLASS_NAMED("StoryPromoCodeComponent")
@interface StoryPromoCodeComponent : StoryComponent
/// PromoCode text that the user copied
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param text PromoCode text that the user copied
///
/// \param customPayload Custom payload for PromoCode component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Quiz component.
SWIFT_CLASS_NAMED("StoryQuizComponent")
@interface StoryQuizComponent : StoryComponent
/// Title of the quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// StoryQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the quiz if exists
///
/// \param options List of options in the quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Rating component.
SWIFT_CLASS_NAMED("StoryRatingComponent")
@interface StoryRatingComponent : StoryComponent
/// Emoji code as the thumb emoji
@property (nonatomic, readonly, copy) NSString * _Nonnull emojiCode;
/// Rating value which user rated in the component
@property (nonatomic, readonly) NSInteger rating;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCode Emoji code as the thumb emoji
///
/// \param rating Rating value which user rated in the component
///
/// \param customPayload Custom payload for this rating if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCode:(NSString * _Nonnull)emojiCode rating:(NSInteger)rating customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Swipe component.
SWIFT_CLASS_NAMED("StorySwipeComponent")
@interface StorySwipeComponent : StoryComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// StorySwipeComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param customPayload Custom payload for Swipe component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the type of a story content
typedef SWIFT_ENUM_NAMED(NSInteger, StoryType, "StoryType", open) {
/// Unidentified story type
  StoryTypeUnknown = 0,
/// Denotes the type of the story is Image
  StoryTypeImage = 1,
/// Denotes the type of the story is Video
  StoryTypeVideo = 2,
/// Denotes the type of the story is LongVideo
  StoryTypeLongVideo = 3,
/// Denotes the type of the story is Live
  StoryTypeLive = 4,
/// Denotes the type of the story is an Ad View
  StoryTypeAd = 5,
};

@class UITouch;

/// This protocol represents an ad view that can be opened between stories
SWIFT_PROTOCOL("_TtP7Storyly13StorylyAdView_")
@protocol StorylyAdView
/// Use this field to dispatch custom action clicked event
@property (nonatomic, copy) void (^ _Nullable onActionClicked)(void);
/// Implement this method to return the ad view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the icon url of the ad view
///
/// returns:
/// Icon URL of the ad view
- (NSURL * _Nonnull)getIcon SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the title of the ad view
///
/// returns:
/// Title of the ad view
- (NSString * _Nonnull)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the data of the ad view
///
/// returns:
/// Title of the ad view
- (NSDictionary<NSString *, id> * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to do your destroy operations
- (void)destroy;
/// Implement this method to do your loading operations
///
/// returns:
/// Duration of the ad view
- (NSInteger)load SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to pause your ad view
- (void)pause;
/// Implement this method to reset operations
- (void)reset;
/// Implement this method to resume your ad view
- (void)resume;
/// Override this method to set layers, for example CTA button
- (void)setLayersWithLayers:(NSDictionary<NSString *, UIView *> * _Nonnull)layers;
/// Override this method to enable custom clicable views
- (BOOL)checkHitWithTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol is used to load the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewListener_")
@protocol StorylyAdViewListener
/// Implement this method to do loading operations of your ad view
- (void)onLoad:(id <StorylyAdView> _Nonnull)adView;
@end


/// This protocol is used as an entrance for the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewProvider_")
@protocol StorylyAdViewProvider
/// Implement this method to do your operations when ad view is requested
- (void)onRequest:(id <StorylyAdViewListener> _Nonnull)adViewListener :(CGRect)frame;
@end


/// This class holds the configuration information of Storyly Bar
SWIFT_CLASS_NAMED("StorylyBarStyling")
@interface StorylyBarStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyBarStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyBarStylingBuilder : NSObject
/// This function allows you to change the orientation of story groups list
/// \param orientation StoryGroupListOrientation instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setOrientation:(enum StoryGroupListOrientation)orientation SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the orientation of story groups list
/// \param count Int instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setSection:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the horizontal edge padding value of the
/// first and last story groups
/// \param padding CGFloat instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setHorizontalEdgePadding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the vertical edge padding value of the
/// first and last story groups
/// \param padding CGFloat instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setVerticalEdgePadding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the horizontal padding value between story groups
/// \param padding CGFloat instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setHorizontalPaddingBetweenItems:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the vertical padding value between story groups
/// \param padding CGFloat instance to set 
///
- (StorylyBarStylingBuilder * _Nonnull)setVerticalPaddingBetweenItems:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyBarStyling with the current properties
///
/// returns:
/// StorylyBarStyling instance
- (StorylyBarStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyConfig")
@interface StorylyConfig : STRConfig
@end

@class StorylyStoryStyling;
@class StorylyStoryGroupStyling;

SWIFT_CLASS_NAMED("Builder")
@interface StorylyBuilder : STRConfigBuilder
/// This function allows you to set StorylyStoryStyling.
/// \param styling StorylyStoryStyling instance to set 
///
- (nonnull instancetype)setStoryStyling:(StorylyStoryStyling * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyBarStyling.
/// \param styling StorylyBarStyling instance to set 
///
- (nonnull instancetype)setBarStyling:(StorylyBarStyling * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyStoryGroupStyling.
/// \param styling StorylyStoryGroupStyling instance to set 
///
- (nonnull instancetype)setStoryGroupStyling:(StorylyStoryGroupStyling * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
- (StorylyConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the source of the storyly data
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyDataSource, "StorylyDataSource", open) {
/// Stories in Storyly API
  StorylyDataSourceAPI = 0,
/// Stories in local device cache
  StorylyDataSourceLocal = 1,
};

@class StorylyView;
enum StorylyEvent : NSInteger;

/// This delegate  represents the class which notifies application when an event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyDelegate")
@protocol StorylyDelegate
@optional
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
/// \param dataSource Source of the storyly data
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Storyly has completed
/// its network operations and had a problem while fetching your stories
/// \param storylyView StorylyView instance in which storyly is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)storylyLoadFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param storylyView StorylyView instance in which action is occurred
///
/// \param rootViewController RootViewController of the story view
///
/// \param story Story in which action is occurred
///
- (void)storylyActionClicked:(StorylyView * _Nonnull)storylyView rootViewController:(UIViewController * _Nonnull)rootViewController story:(Story * _Nonnull)story;
/// This function will let you know that stories are started to be presented to the users.
/// \param storylyView StorylyView instance in which stories are started to shown
///
- (void)storylyStoryPresented:(StorylyView * _Nonnull)storylyView;
/// This function will let you know that programmatic story show are failed.
/// \param storylyView StorylyView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)storylyStoryPresentFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current story while watching it.
/// \param storylyView StorylyView instance in which the story is dismissed
///
- (void)storylyStoryDismissed:(StorylyView * _Nonnull)storylyView;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param storyGroup Story group in which the user interacted with a component
///
/// \param story Story in which the user interacted with a component
///
/// \param storyComponent Interactive component that user is interacted with
///
- (void)storylyUserInteracted:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nonnull)storyGroup story:(Story * _Nonnull)story storyComponent:(StoryComponent * _Nonnull)storyComponent;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param storyGroup Story group in which the event is received
///
/// \param story Story in which the event is received
///
/// \param storyComponent Interactive story component if event is related with a story component
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story storyComponent:(StoryComponent * _Nullable)storyComponent;
/// This function will notify you about StorylyView size changed for updating parent view size
/// Only for when using Widget Gallery from Storyly Dashboard.
/// \param storylyView StorylyView instance in which the event is received
///
/// \param size StorylyView size width and height
///
- (void)storylySizeChanged:(StorylyView * _Nonnull)storylyView size:(CGSize)size;
@end

/// This enum represents all possible events that can be sent from Storyly
typedef SWIFT_ENUM(NSInteger, StorylyEvent, open) {
/// Sent when a story group is opened by user selection, programmatical selection and deeplink
  StorylyEventStoryGroupOpened = 0,
/// Sent when a story group is opened by user selection
  StorylyEventStoryGroupUserOpened = 1,
/// Sent when a story group is opened using a deeplink
  StorylyEventStoryGroupDeepLinkOpened = 2,
/// Sent when a story group is opened programmatically
  StorylyEventStoryGroupProgrammaticallyOpened = 3,
/// Sent when a story group is completed
  StorylyEventStoryGroupCompleted = 4,
/// Sent when a user does previous swipe gesture while watching a story in a story group
  StorylyEventStoryGroupPreviousSwiped = 5,
/// Sent when a user does next swipe gesture while watching a story in a story group
  StorylyEventStoryGroupNextSwiped = 6,
/// Sent when a user dismisses or clicks the close button to close the story group
  StorylyEventStoryGroupClosed = 7,
/// Sent after a while when a user sees a story as an indicator that shows story is watched
  StorylyEventStoryImpression = 8,
/// Sent when a story is loaded
  StorylyEventStoryViewed = 9,
/// Sent after a story is finished
  StorylyEventStoryCompleted = 10,
/// Sent when a user does previous click tap while watching a story
  StorylyEventStoryPreviousClicked = 11,
/// Sent when a user does next click tap while watching a story
  StorylyEventStoryNextClicked = 12,
/// Sent when a story is paused
  StorylyEventStoryPaused = 13,
/// Sent when a story is resumed
  StorylyEventStoryResumed = 14,
/// Sent when a story share url is generated and clicked to a sharing way
  StorylyEventStoryShared = 15,
/// Sent when a story liked
  StorylyEventStoryLiked = 16,
/// Sent when a user clicks to interactive CTA button or does a swipe up action
  StorylyEventStoryCTAClicked = 17,
/// Sent when a user clicks to an emoji on interactive emoji list
  StorylyEventStoryEmojiClicked = 18,
/// Sent when a user answers a poll
  StorylyEventStoryPollAnswered = 19,
/// Sent when a user answers a quiz
  StorylyEventStoryQuizAnswered = 20,
/// Sent when a user answers a image quiz
  StorylyEventStoryImageQuizAnswered = 21,
/// Sent when a user adds reminder to a interactive countdown component
  StorylyEventStoryCountdownReminderAdded = 22,
/// Sent when a user removes the reminder from a interactive countdown component
  StorylyEventStoryCountdownReminderRemoved = 23,
/// Sent when a user rates in interactive rating component
  StorylyEventStoryRated = 24,
/// Sent when a user sees an interactive component
  StorylyEventStoryInteractiveImpression = 25,
/// Sent when a user clikcs a product tag point
  StorylyEventStoryProductTagExpanded = 26,
/// Sent when a user clicks button
  StorylyEventStoryButtonActionClicked = 27,
/// Sent when a user clicks image button
  StorylyEventStoryImageButtonActionClicked = 28,
/// Sent when a user clicks swipe action
  StorylyEventStorySwipeActionClicked = 29,
/// Sent when a user clicks a product expanded area
  StorylyEventStoryProductTagClicked = 30,
/// Sent when a user clicks a product card area
  StorylyEventStoryProductCardClicked = 31,
/// Sent when a user clicks a product catalog area
  StorylyEventStoryProductCatalogClicked = 32,
/// Sent when a user copy a promo code
  StorylyEventStoryPromoCodeCopied = 33,
/// Sent when a user sends a comment
  StorylyEventStoryCommentSent = 34,
/// Sent when a user opens input area
  StorylyEventStoryCommentInputOpened = 35,
/// Sent when a user closes input area
  StorylyEventStoryCommentInputClosed = 36,
/// Sent when a user seeks the video in long story
  StorylyEventStorySeeked = 37,
/// Sent when a product successfully added
  StorylyEventStoryProductCartAdded = 38,
/// Sent when a product added failed
  StorylyEventStoryProductCartAddFailed = 39,
/// Sent when product sheet is opened
  StorylyEventStoryProductSheetOpened = 40,
/// Sent when a product added
  StorylyEventStoryProductAdded = 41,
/// Sent when a product updated
  StorylyEventStoryProductUpdated = 42,
/// Sent when product removed
  StorylyEventStoryProductRemoved = 43,
/// Sent when checkout button clicked
  StorylyEventStoryCheckoutButtonClicked = 44,
/// Sent when cart button clicked from success sheet
  StorylyEventStoryCartButtonClicked = 45,
/// Sent when cart view clicked
  StorylyEventStoryCartViewClicked = 46,
/// Sent  when product selected
  StorylyEventStoryProductSelected = 47,
};


/// This class does the enum to string conversion of the Storyly events
SWIFT_CLASS("_TtC7Storyly18StorylyEventHelper")
@interface StorylyEventHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storylyEventNameWithEvent:(enum StorylyEvent)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class triggers initialization of Storyly
SWIFT_CLASS_NAMED("StorylyInit")
@interface StorylyInit : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull storylyId;
@property (nonatomic, readonly, strong) StorylyConfig * _Nonnull config;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
/// \param config Config of Storyly
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId config:(StorylyConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available layout direction that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyLayoutDirection, "StorylyLayoutDirection", open) {
/// Left-to-right layout direction
  StorylyLayoutDirectionLTR = 0,
/// Right-to-left layout direction
  StorylyLayoutDirectionRTL = 1,
};


/// This protocol represents a loading view that you can inherit to
/// customize the loading view of stories
SWIFT_PROTOCOL("_TtP7Storyly18StorylyLoadingView_")
@protocol StorylyLoadingView
/// Implement this method to return the loading view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to include your show actions
- (void)show;
/// Implement this method to include your hide actions
- (void)hide;
@end


/// This class holds the configuration information of StorylyProductConfig
SWIFT_CLASS_NAMED("StorylyProductConfig")
@interface StorylyProductConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyProductConfig
SWIFT_CLASS_NAMED("Builder")
@interface StorylyProductConfigBuilder : NSObject
- (StorylyProductConfigBuilder * _Nonnull)setPriceFormatter:(id <StoryPriceFormatter> _Nonnull)formatter SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set enability of hydration from feed data from backend
/// \param isEnabled Bool instance to set 
///
- (StorylyProductConfigBuilder * _Nonnull)setFallbackAvailability:(BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set enability of hydration from feed data from backend
/// \param isEnabled Bool instance to set 
///
- (StorylyProductConfigBuilder * _Nonnull)setCartEnabled:(BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set user specific product feed
/// \param feed product feed to set 
///
- (StorylyProductConfigBuilder * _Nonnull)setProductFeed:(NSDictionary<NSString *, NSArray<STRProductItem *> *> * _Nullable)feed SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyProductConfig with the current properties
///
/// returns:
/// StorylyProductConfig instance
- (StorylyProductConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This delegate  represents the class which notifies application when an product related event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyProductDelegate")
@protocol StorylyProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param products Found list of product information in stories
///
- (void)storylyHydration:(StorylyView * _Nonnull)storylyView products:(NSArray<STRProductInformation *> * _Nonnull)products;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event;
/// This function will notify you about updates the cart in a StorylyView component
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)storylyUpdateCartEventWithStorylyView:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nullable))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


/// This class holds the configuration information of StorylyShareConfig
SWIFT_CLASS_NAMED("StorylyShareConfig")
@interface StorylyShareConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyShareConfig
SWIFT_CLASS_NAMED("Builder")
@interface StorylyShareConfigBuilder : NSObject
/// This function allows you to customize share url
/// * - parameter url String instance to set
- (StorylyShareConfigBuilder * _Nonnull)setShareUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set Facebook app id to be used in Instagram share to stories .
/// \param id AppID from your meta development account 
///
- (StorylyShareConfigBuilder * _Nonnull)setFacebookAppID:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set the visibility of the app icon on the shared media.
/// \param isVisible Visibility of app icon, default is true 
///
- (StorylyShareConfigBuilder * _Nonnull)setAppLogoVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyShareConfig with the current properties
///
/// returns:
/// StorylyShareConfig instance
- (StorylyShareConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the configuration information of Storyly Story Group
SWIFT_CLASS_NAMED("StorylyStoryGroupStyling")
@interface StorylyStoryGroupStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyStoryGroupStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyStoryGroupStylingBuilder : NSObject
/// This function allows you to change the border color of the story group
/// icons which are watched by the user.
/// \param colors [UIColor] instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconBorderColorSeen:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the border color of the story
/// group icons which are unwatched by the user.
/// \param colors [UIColor] instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconBorderColorNotSeen:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the background color of the story group icon
/// which is shown to the user as skeleton view till the stories are loaded
/// \param color UIColor instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconBackgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// If any of the story group is selected as pinned group from dashboard,
/// a little star icon will appear along with the story group icon. This
/// function allows you to change the background color of this pin icon
/// \param color UIColor instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setPinIconColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change height of the story group icon. Have to set story group size attribute to StoryGroupSize.Custom for use this feature.
/// \param height CGFloat instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconHeight:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change width of the story group icon. Have to set story group size attribute to StoryGroupSize.Custom for use this feature.
/// \param width CGFloat instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconWidth:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change corner radius value of the story group icon. Have to set story group size attribute to StoryGroupSize.Custom for use this feature.
/// \param radius CGFloat instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconCornerRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to use different story groups images for different labels
/// \param label String? instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconThematicImageLabel:(NSString * _Nullable)label SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the animation of the story group
/// \param animation StoryGroupAnimation instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setIconBorderAnimation:(enum StoryGroupAnimation)animation SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the text color of the story group
/// \param color UIColor instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setTitleSeenColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the text color of the story group
/// \param color UIColor instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setTitleNotSeenColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the number of lines of the story group text
/// \param count Int instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setTitleLineCount:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the font of the story group text
/// \param font UIFont? instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setTitleFont:(UIFont * _Nullable)font SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the story group text
/// \param isVisible Bool instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setTitleVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the size of the story group
/// \param size StoryGroupSize instance to set 
///
- (StorylyStoryGroupStylingBuilder * _Nonnull)setSize:(enum StoryGroupSize)size SWIFT_WARN_UNUSED_RESULT;
/// This function will allow you to add custom story group view
/// * - parameter factory StoryGroupViewFactory? instance to set
- (StorylyStoryGroupStylingBuilder * _Nonnull)setCustomGroupViewFactory:(id <StoryGroupViewFactory> _Nullable)factory SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyStoryGroupStyling with the current properties
///
/// returns:
/// StorylyStoryGroupStyling instance
- (StorylyStoryGroupStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the configuration information of Storyly Story
SWIFT_CLASS_NAMED("StorylyStoryStyling")
@interface StorylyStoryStyling : STRStoryStyling
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyStoryBuilder : STRStoryBuilder
/// This function allows you to change the header icon border color of the story view
/// \param colors  [UIColor] instance to set 
///
- (StorylyStoryBuilder * _Nonnull)setHeaderIconBorderColor:(NSArray<UIColor *> * _Nonnull)colors SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the header text color of the story view
/// \param color UIColor instance to set 
///
- (StorylyStoryBuilder * _Nonnull)setTitleColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the story view header icon
/// \param isVisible Bool instance to set 
///
- (StorylyStoryBuilder * _Nonnull)setHeaderIconVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
- (StorylyStoryStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the configuration information of Vertical Feed Bar
SWIFT_CLASS_NAMED("StorylyVerticalFeedBarStyling")
@interface StorylyVerticalFeedBarStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of VerticalFeedBarStylingBuilder
SWIFT_CLASS_NAMED("Builder")
@interface StorylyVerticalFeedBarStylingBuilder : NSObject
/// This function allows you to change the orientation of vertical feed groups list
/// \param count Int instance to set 
///
- (StorylyVerticalFeedBarStylingBuilder * _Nonnull)setSection:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the horizontal edge padding value of the
/// first and last vertical feed groups
/// \param padding CGFloat instance to set 
///
- (StorylyVerticalFeedBarStylingBuilder * _Nonnull)setHorizontalEdgePadding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the vertical edge padding value of the
/// first and last vertical feed groups
/// \param padding CGFloat instance to set 
///
- (StorylyVerticalFeedBarStylingBuilder * _Nonnull)setVerticalEdgePadding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the horizontal padding value between vertical feed groups
/// \param padding CGFloat instance to set 
///
- (StorylyVerticalFeedBarStylingBuilder * _Nonnull)setHorizontalPaddingBetweenItems:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the vertical padding value between vertical feed groups
/// \param padding CGFloat instance to set 
///
- (StorylyVerticalFeedBarStylingBuilder * _Nonnull)setVerticalPaddingBetweenItems:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyVerticalFeedBarStyling with the current properties
///
/// returns:
/// StorylyVerticalFeedBarStyling instance
- (StorylyVerticalFeedBarStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyVerticalFeedBarView")
@interface StorylyVerticalFeedBarView : STRVerticalFeedView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyVerticalFeedConfig")
@interface StorylyVerticalFeedConfig : STRConfig
@end

@class StorylyVerticalFeedCustomization;
@class StorylyVerticalFeedGroupStyling;

SWIFT_CLASS_NAMED("Builder")
@interface StorylyVerticalFeedConfigBuilder : STRConfigBuilder
/// This function allows you to set StorylyVerticalFeedCustomization.
/// \param styling StorylyVerticalFeedCustomization instance to set 
///
- (nonnull instancetype)setVerticalFeedConfig:(StorylyVerticalFeedCustomization * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyVerticalFeedBarStyling.
/// \param styling StorylyVerticalFeedBarStyling instance to set 
///
- (nonnull instancetype)setVerticalFeedBarStyling:(StorylyVerticalFeedBarStyling * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set StorylyVerticalFeedGroupStyling.
/// \param styling StorylyVerticalFeedCustomization instance to set 
///
- (nonnull instancetype)setVerticalFeedGroupStyling:(StorylyVerticalFeedGroupStyling * _Nonnull)styling SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (StorylyVerticalFeedConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// This class holds the configuration information of Storyly Vertical Feed
SWIFT_CLASS_NAMED("StorylyVerticalFeedCustomization")
@interface StorylyVerticalFeedCustomization : STRStoryStyling
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyVerticalFeedCustomizationBuilder : STRStoryBuilder
/// This function allows you to change the visibility of the progress bar
/// \param isVisible Bool instance to set 
///
- (StorylyVerticalFeedCustomizationBuilder * _Nonnull)setProgressBarVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the like button
/// \param isVisible Bool instance to set 
///
- (StorylyVerticalFeedCustomizationBuilder * _Nonnull)setLikeButtonVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the UIImage of the view header close button icon
/// \param icon UIImage? instance to set 
///
- (StorylyVerticalFeedCustomizationBuilder * _Nonnull)setLikeButtonIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the like button
/// \param isVisible Bool instance to set 
///
- (StorylyVerticalFeedCustomizationBuilder * _Nonnull)setShareButtonVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
- (StorylyVerticalFeedCustomization * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class VerticalFeedGroup;
@class VerticalFeedItem;
@class VerticalFeedItemComponent;
enum VerticalFeedEvent : NSInteger;

/// This interface represents StorylyVerticalFeedDelegate which notifies application when an event
/// occurs in STRVerticalFeedView.
SWIFT_PROTOCOL_NAMED("StorylyVerticalFeedDelegate")
@protocol StorylyVerticalFeedDelegate
@optional
/// This function will let you know that Vertical Feed has completed
/// its network operations and vertical feed group list has just shown to the user.
/// \param view STRVerticalFeedView instance in which vertical feed is loaded
///
/// \param feedGroupList List of vertical feed groups when vertical feed is loaded
///
/// \param dataSource List of vertical feed groups when vertical feed is loaded
///
- (void)verticalFeedLoaded:(STRVerticalFeedView * _Nonnull)view feedGroupList:(NSArray<VerticalFeedGroup *> * _Nonnull)feedGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Vertical Feed has completed
/// its network operations and had a problem while fetching your stories
/// \param view STRVerticalFeedView instance in which vertical feed is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)verticalFeedLoadFailed:(STRVerticalFeedView * _Nonnull)view errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param view verticalFeedView instance in which action is occurred
///
/// \param rootViewController RootViewController of the vertical feed view
///
/// \param feedItem verticalFeedItem in which action is occurred
///
- (void)verticalFeedActionClicked:(STRVerticalFeedView * _Nonnull)view rootViewController:(UIViewController * _Nonnull)rootViewController feedItem:(VerticalFeedItem * _Nonnull)feedItem;
/// This function will let you know that stories are started to be presented to the users.
/// \param view STRVerticalFeedView instance in which vertical feed are started to shown
///
- (void)verticalFeedPresented:(STRVerticalFeedView * _Nonnull)view;
/// This function will let you know that programmatic vertical feed show are failed.
/// \param view STRVerticalFeedView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)verticalFeedPresentFailed:(STRVerticalFeedView * _Nonnull)view errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current vertical feed while watching it.
/// \param view STRVerticalFeedView instance in which the vertical feed  is dismissed
///
- (void)verticalFeedDismissed:(STRVerticalFeedView * _Nonnull)view;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param view STRVerticalFeedView instance in which the user interacted with a component
///
/// \param feedGroup Vertical feed group in which the user interacted with a component
///
/// \param feedItem Vertical feed in which the user interacted with a component
///
/// \param feedItemComponent Interactive component that user is interacted with
///
- (void)verticalFeedUserInteracted:(STRVerticalFeedView * _Nonnull)view feedGroup:(VerticalFeedGroup * _Nonnull)feedGroup feedItem:(VerticalFeedItem * _Nonnull)feedItem feedItemComponent:(VerticalFeedItemComponent * _Nonnull)feedItemComponent;
/// This function will notify you about all Vertical Feed events and let you to send these events to
/// specific data platforms
/// \param view STRVerticalFeedView instance in which the event is received
///
/// \param event VerticalFeed event type which is received
///
/// \param feedGroup Vertical feed group in which the event is received
///
/// \param feedItem Vertical feed in which the event is received
///
/// \param feedItemComponent Interactive vertical feed component if event is related with a vertical feed component
///
- (void)verticalFeedEvent:(STRVerticalFeedView * _Nonnull)view event:(enum VerticalFeedEvent)event feedGroup:(VerticalFeedGroup * _Nullable)feedGroup feedItem:(VerticalFeedItem * _Nullable)feedItem feedItemComponent:(VerticalFeedItemComponent * _Nullable)feedItemComponent;
@end

/// This enum represents the type of a group order
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedGroupOrder, "StorylyVerticalFeedGroupOrder", open) {
/// Ordered statically based on group data
  VerticalFeedGroupOrderStatic = 0,
/// Ordered based on the seen state
  VerticalFeedGroupOrderBySeenState = 1,
};


/// This class holds the configuration information of Storyly Story Group
SWIFT_CLASS_NAMED("StorylyVerticalFeedGroupStyling")
@interface StorylyVerticalFeedGroupStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyStoryGroupStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyVerticalFeedGroupStylingBuilder : NSObject
/// This function allows you to change the background color of the vertical feed group icon
/// which is shown to the user as skeleton view till the stories are loaded
/// \param color UIColor instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setIconBackgroundColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change height of the vertical feed group icon
/// \param height CGFloat instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setIconHeight:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change corner radius value of the vertical feed group icon
/// \param radius CGFloat instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setIconCornerRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to use different vertical feed groups images for different labels
/// \param label String? instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setIconThematicImageLabel:(NSString * _Nullable)label SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the font of the vertical feed group text
/// \param font UIFont? instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setTitleFont:(UIFont * _Nullable)font SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the visibility of the vertical feed group text
/// \param isVisible Bool instance to set 
///
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setTitleVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the order of the vertical feed group
/// * - parameter groupOrder StorylyVerticalFeedGroupOrder instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setGroupOrder:(enum VerticalFeedGroupOrder)order SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the impression icon
/// @param image UIImage instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setImpressionIcon:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the like icon
/// @param image UIImage instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setLikeIcon:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to change the text color of the group view
/// @param color UIColor instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setTextColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set minimum impression count to show impression icon
/// @param count Int instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setMinImpressionCountToShowIcon:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set minimum like count to show like icon
/// @param count Int instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setMinLikeCountToShowIcon:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to set vertical feed type indicator visibility
/// @param isVisible Bool instance to set
- (StorylyVerticalFeedGroupStylingBuilder * _Nonnull)setTypeIndicatorVisibility:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyVerticalFeedGroupStyling with the current properties
///
/// returns:
/// StorylyVerticalFeedGroupStyling instance
- (StorylyVerticalFeedGroupStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class triggers initialization of Vertical Feed
SWIFT_CLASS_NAMED("StorylyVerticalFeedInit")
@interface StorylyVerticalFeedInit : NSObject
@property (nonatomic, strong) StorylyVerticalFeedConfig * _Nonnull config;
/// StorylyVerticalFeedInit initialization
/// \param storylyId Instance token from vertical feed dashboard
///
/// \param config Config of Vertical Feed
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId config:(StorylyVerticalFeedConfig * _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StorylyVerticalFeedPresenterView;

/// This interface represents StorylyVerticalFeedPresenterDelegate which notifies application when an event
/// occurs in StorylyVerticalFeedPresenterView.
SWIFT_PROTOCOL_NAMED("StorylyVerticalFeedPresenterDelegate")
@protocol StorylyVerticalFeedPresenterDelegate
@optional
/// This function will let you know that Vertical Feed has completed
/// its network operations and vertical feed group list has just shown to the user.
/// \param view StorylyVerticalFeedPresenterView instance in which vertical feed is loaded
///
/// \param feedGroupList List of vertical feed groups when vertical feed is loaded
///
/// \param dataSource List of vertical feed groups when vertical feed is loaded
///
- (void)verticalFeedLoaded:(StorylyVerticalFeedPresenterView * _Nonnull)view feedGroupList:(NSArray<VerticalFeedGroup *> * _Nonnull)feedGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Vertical Feed has completed
/// its network operations and had a problem while fetching your stories
/// \param view StorylyVerticalFeedPresenterView instance in which vertical feed is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)verticalFeedLoadFailed:(StorylyVerticalFeedPresenterView * _Nonnull)view errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param view verticalFeedView instance in which action is occurred
///
/// \param feedItem verticalFeedItem in which action is occurred
///
- (void)verticalFeedActionClicked:(StorylyVerticalFeedPresenterView * _Nonnull)view feedItem:(VerticalFeedItem * _Nonnull)feedItem;
/// This function will let you know that stories are started to be presented to the users.
/// \param view StorylyVerticalFeedPresenterView instance in which vertical feed are started to shown
///
- (void)verticalFeedPresented:(StorylyVerticalFeedPresenterView * _Nonnull)view;
/// This function will let you know that programmatic vertical feed show are failed.
/// \param view StorylyVerticalFeedPresenterView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)verticalFeedPresentFailed:(StorylyVerticalFeedPresenterView * _Nonnull)view errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current vertical feed while watching it.
/// \param view StorylyVerticalFeedPresenterView instance in which the vertical feed  is dismissed
///
- (void)verticalFeedDismissed:(StorylyVerticalFeedPresenterView * _Nonnull)view;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param view StorylyVerticalFeedPresenterView instance in which the user interacted with a component
///
/// \param feedGroup Vertical feed group in which the user interacted with a component
///
/// \param feedItem Vertical feed in which the user interacted with a component
///
/// \param feedItemComponent Interactive component that user is interacted with
///
- (void)verticalFeedUserInteracted:(StorylyVerticalFeedPresenterView * _Nonnull)view feedGroup:(VerticalFeedGroup * _Nonnull)feedGroup feedItem:(VerticalFeedItem * _Nonnull)feedItem feedItemComponent:(VerticalFeedItemComponent * _Nonnull)feedItemComponent;
/// This function will notify you about all Vertical Feed events and let you to send these events to
/// specific data platforms
/// \param view StorylyVerticalFeedPresenterView instance in which the event is received
///
/// \param event VerticalFeed event type which is received
///
/// \param feedGroup Vertical feed group in which the event is received
///
/// \param feedItem Vertical feed in which the event is received
///
/// \param feedItemComponent Interactive vertical feed component if event is related with a vertical feed component
///
- (void)verticalFeedEvent:(StorylyVerticalFeedPresenterView * _Nonnull)view event:(enum VerticalFeedEvent)event feedGroup:(VerticalFeedGroup * _Nullable)feedGroup feedItem:(VerticalFeedItem * _Nullable)feedItem feedItemComponent:(VerticalFeedItemComponent * _Nullable)feedItemComponent;
@end


/// This delegate  represents the class which notifies application when an product related event
/// occurs in StorylyVerticalFeedPresenterView.
SWIFT_PROTOCOL_NAMED("StorylyVerticalFeedPresenterProductDelegate")
@protocol StorylyVerticalFeedPresenterProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param view StorylyVerticalFeedPresenterView feed instance in which the user interacted with a component
///
/// \param products Found list of product information in vertical feed
///
- (void)verticalFeedHydration:(StorylyVerticalFeedPresenterView * _Nonnull)view products:(NSArray<STRProductInformation *> * _Nonnull)products;
/// This function will notify you about all Vertical feed events and let you to send these events to
/// specific data platforms
/// \param view StorylyVerticalFeedPresenterView instance in which the event is received
///
/// \param event Vertical feed event type which is received
///
- (void)verticalFeedEvent:(StorylyVerticalFeedPresenterView * _Nonnull)view event:(enum VerticalFeedEvent)event;
/// This function will notify you about updates the cart in a Vertical feed component
/// \param view StorylyVerticalFeedPresenterView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)verticalFeedUpdateCartEventWithView:(StorylyVerticalFeedPresenterView * _Nonnull)view event:(enum VerticalFeedEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nullable))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


SWIFT_CLASS_NAMED("StorylyVerticalFeedPresenterView")
@interface StorylyVerticalFeedPresenterView : UIView
/// This property triggers StorylyVerticalFeedPresenterView initialization
@property (nonatomic, strong) StorylyVerticalFeedInit * _Nonnull storylyVerticalFeedInit;
/// RootviewController of the StorylyView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the ReelsView which will notify you when an event occurs in ReelsView.
@property (nonatomic, weak) id <StorylyVerticalFeedPresenterDelegate> _Nullable storylyVerticalFeedDelegate;
/// Delegate of the ReelsView which will notify you when an product related event occurs in ReelsView.
@property (nonatomic, weak) id <StorylyVerticalFeedPresenterProductDelegate> _Nullable storylyVerticalFeedProductDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyVerticalFeedAdViewProvider;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
/// This function allows you pause vertical feed presenter view
- (void)pause;
/// This function allows you play vertical feed view
- (void)play;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface StorylyVerticalFeedPresenterView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to hydrate your products
/// \param products list of products to hydrate products
///
- (void)hydrateProductsWithProducts:(NSArray<STRProductItem *> * _Nonnull)products;
/// This function allows you to update your cart
/// \param cart A STRCart objects to update cart
///
- (void)updateCartWithCart:(STRCart * _Nonnull)cart;
@end



/// This delegate  represents the class which notifies application when an product related event
/// occurs in STRVerticalFeedView.
SWIFT_PROTOCOL_NAMED("StorylyVerticalFeedProductDelegate")
@protocol StorylyVerticalFeedProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param view STRVerticalFeedView feed instance in which the user interacted with a component
///
/// \param products Found list of product information in vertical feed
///
- (void)verticalFeedHydration:(STRVerticalFeedView * _Nonnull)view products:(NSArray<STRProductInformation *> * _Nonnull)products;
/// This function will notify you about all Vertical feed events and let you to send these events to
/// specific data platforms
/// \param view STRVerticalFeedView instance in which the event is received
///
/// \param event Vertical feed event type which is received
///
- (void)verticalFeedEvent:(STRVerticalFeedView * _Nonnull)view event:(enum VerticalFeedEvent)event;
/// This function will notify you about updates the cart in a Vertical feed component
/// \param view STRVerticalFeedView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)verticalFeedUpdateCartEventWithView:(STRVerticalFeedView * _Nonnull)view event:(enum VerticalFeedEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nullable))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


SWIFT_CLASS_NAMED("StorylyVerticalFeedView")
@interface StorylyVerticalFeedView : STRVerticalFeedView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is the main view of Storyly.
SWIFT_CLASS_NAMED("StorylyView")
@interface StorylyView : UIView
/// This property triggers StorylyView initialization
@property (nonatomic, strong) StorylyInit * _Nonnull storylyInit;
/// RootviewController of the StorylyView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the StorylyView which will notify you when an event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyDelegate> _Nullable delegate;
/// Delegate of the StorylyView which will notify you when an product related event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyProductDelegate> _Nullable productDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyAdViewProvider;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to open using deeplink uri.
/// \param payload Intent data which includes storyly as host
///
///
/// returns:
/// Success of the operation
- (BOOL)openStoryWithPayload:(NSURL * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
- (void)resumeStoryWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)pauseStoryWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)closeStoryWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to hydrate your products
/// \param products list of products to hydrate products
///
- (void)hydrateProductsWithProducts:(NSArray<STRProductItem *> * _Nonnull)products;
/// This function allows you to update your cart
/// \param cart A STRCart objects to update cart
///
- (void)updateCartWithCart:(STRCart * _Nonnull)cart;
/// This function allows you to open your custom external view
/// \param externalActionView External view to show
///
- (void)showExternalActionViewWithExternalActionView:(UIView * _Nonnull)externalActionView;
/// This function dismisses your already open external view
- (void)dismissExternalActionView;
@end






















enum VerticalFeedItemComponentType : NSInteger;

/// This parent class represents the interactive components which users are interacted with.
SWIFT_CLASS_NAMED("VerticalFeedItemComponent")
@interface VerticalFeedItemComponent : NSObject
/// Id of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Type of the interactive component
@property (nonatomic, readonly) enum VerticalFeedItemComponentType type;
/// Custom payload for the interactive component if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Button component.
SWIFT_CLASS_NAMED("VerticalFeedButtonComponent")
@interface VerticalFeedButtonComponent : VerticalFeedItemComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// VerticalFeedButtonComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for Button component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Comment component.
SWIFT_CLASS_NAMED("VerticalFeedCommentComponent")
@interface VerticalFeedCommentComponent : VerticalFeedItemComponent
/// Comment text that the user sent
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// VerticalFeedCommentComponent initialization
/// \param id Id of the interactive component
///
/// \param text Comment text that the user sent
///
/// \param customPayload Custom payload for Comment component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Emoji component.
SWIFT_CLASS_NAMED("VerticalFeedEmojiComponent")
@interface VerticalFeedEmojiComponent : VerticalFeedItemComponent
/// List of the emojis in the component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojiCodes;
/// Emoji index that the user selected
@property (nonatomic, readonly) NSInteger selectedEmojiIndex;
/// VerticalFeedEmojiComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCodes List of the emojis in the component
///
/// \param selectedEmojiIndex Emoji index that the user selected
///
/// \param customPayload Custom payload for this emoji if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCodes:(NSArray<NSString *> * _Nonnull)emojiCodes selectedEmojiIndex:(NSInteger)selectedEmojiIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents all possible events that can be sent from Storyly Vertical Feed
typedef SWIFT_ENUM(NSInteger, VerticalFeedEvent, open) {
/// Sent when a VerticalFeedGroup is opened by user selection, programmatically selection and deeplink
  VerticalFeedEventVerticalFeedGroupOpened = 0,
/// Sent when a VerticalFeedGroup is opened by user selection
  VerticalFeedEventVerticalFeedGroupUserOpened = 1,
/// Sent when a VerticalFeedGroup is opened using a deeplink
  VerticalFeedEventVerticalFeedGroupDeepLinkOpened = 2,
/// Sent when a VerticalFeedGroup is opened programmatically
  VerticalFeedEventVerticalFeedGroupProgrammaticallyOpened = 3,
/// Sent when a VerticalFeedGroup is completed
  VerticalFeedEventVerticalFeedGroupCompleted = 4,
/// Sent when a user does previous swipe gesture while watching a VerticalFeedItem in a VerticalFeedGroup
  VerticalFeedEventVerticalFeedGroupPreviousSwiped = 5,
/// Sent when a user does next swipe gesture while watching a VerticalFeedItem in a VerticalFeedGroup
  VerticalFeedEventVerticalFeedGroupNextSwiped = 6,
/// Sent when a user dismisses or clicks the close button to close the VerticalFeedGroup
  VerticalFeedEventVerticalFeedGroupClosed = 7,
/// Sent after a while when a user sees a VerticalFeedItem as an indicator that shows VerticalFeedItem is watched
  VerticalFeedEventVerticalFeedItemImpression = 8,
/// Sent when a VerticalFeedItem is loaded
  VerticalFeedEventVerticalFeedItemViewed = 9,
/// Sent after a VerticalFeedItem is finished
  VerticalFeedEventVerticalFeedItemCompleted = 10,
/// Sent when a user does previous click tap while watching a VerticalFeedItem
  VerticalFeedEventVerticalFeedItemPreviousClicked = 11,
/// Sent when a user does next click tap while watching a VerticalFeedItem
  VerticalFeedEventVerticalFeedItemNextClicked = 12,
/// Sent when a VerticalFeedItem is paused
  VerticalFeedEventVerticalFeedItemPaused = 13,
/// Sent when a VerticalFeedItem is resumed
  VerticalFeedEventVerticalFeedItemResumed = 14,
/// Sent when a VerticalFeedItem share url is generated and clicked to a sharing way
  VerticalFeedEventVerticalFeedItemShared = 15,
/// Sent when a VerticalFeedItem is liked
  VerticalFeedEventVerticalFeedItemLiked = 16,
/// Sent when a user clicks an interactive CTA button or does a swipe up action
  VerticalFeedEventVerticalFeedItemCTAClicked = 17,
/// Sent when a user clicks an emoji on the interactive emoji list
  VerticalFeedEventVerticalFeedItemEmojiClicked = 18,
/// Sent when a user answers a poll
  VerticalFeedEventVerticalFeedItemPollAnswered = 19,
/// Sent when a user answers a quiz
  VerticalFeedEventVerticalFeedItemQuizAnswered = 20,
/// Sent when a user answers an image quiz
  VerticalFeedEventVerticalFeedItemImageQuizAnswered = 21,
/// Sent when a user adds a reminder to an interactive countdown component
  VerticalFeedEventVerticalFeedItemCountdownReminderAdded = 22,
/// Sent when a user removes the reminder from an interactive countdown component
  VerticalFeedEventVerticalFeedItemCountdownReminderRemoved = 23,
/// Sent when a user rates in an interactive rating component
  VerticalFeedEventVerticalFeedItemRated = 24,
/// Sent when a user sees an interactive component
  VerticalFeedEventVerticalFeedItemInteractiveImpression = 25,
/// Sent when a user clicks a product tag point
  VerticalFeedEventVerticalFeedItemProductTagExpanded = 26,
/// Sent when a user clicks button
  VerticalFeedEventVerticalFeedItemButtonActionClicked = 27,
/// Sent when a user clicks image button
  VerticalFeedEventVerticalFeedItemImageButtonActionClicked = 28,
/// Sent when a user clicks swipe action
  VerticalFeedEventVerticalFeedItemSwipeActionClicked = 29,
/// Sent when a user clicks a product expanded area
  VerticalFeedEventVerticalFeedItemProductTagClicked = 30,
/// Sent when a user clicks a product card area
  VerticalFeedEventVerticalFeedItemProductCardClicked = 31,
/// Sent when a user clicks a product catalog area
  VerticalFeedEventVerticalFeedItemProductCatalogClicked = 32,
/// Sent when a user copies a promo code
  VerticalFeedEventVerticalFeedItemPromoCodeCopied = 33,
/// Sent when a user sends a comment
  VerticalFeedEventVerticalFeedItemCommentSent = 34,
/// Sent when a user opens the input area
  VerticalFeedEventVerticalFeedItemCommentInputOpened = 35,
/// Sent when a user closes the input area
  VerticalFeedEventVerticalFeedItemCommentInputClosed = 36,
/// Sent when a user seeks the video in a long VerticalFeedItem
  VerticalFeedEventVerticalFeedItemSeeked = 37,
/// Sent when a product is successfully added
  VerticalFeedEventVerticalFeedItemProductCartAdded = 38,
/// Sent when adding a product failed
  VerticalFeedEventVerticalFeedItemProductCartAddFailed = 39,
/// Sent when the product sheet is opened
  VerticalFeedEventVerticalFeedItemProductSheetOpened = 40,
/// Sent when a product is added
  VerticalFeedEventVerticalFeedItemProductAdded = 41,
/// Sent when a product is updated
  VerticalFeedEventVerticalFeedItemProductUpdated = 42,
/// Sent when a product is removed
  VerticalFeedEventVerticalFeedItemProductRemoved = 43,
/// Sent when the checkout button is clicked
  VerticalFeedEventVerticalFeedItemCheckoutButtonClicked = 44,
/// Sent when the cart button is clicked from the success sheet
  VerticalFeedEventVerticalFeedItemCartButtonClicked = 45,
/// Sent when the cart view is clicked
  VerticalFeedEventVerticalFeedItemCartViewClicked = 46,
/// Sent when a product is selected
  VerticalFeedEventVerticalFeedItemProductSelected = 47,
};


/// This class does the enum to string conversion of the Vertical Feed events
SWIFT_CLASS("_TtC7Storyly23VerticalFeedEventHelper")
@interface VerticalFeedEventHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Vertical feed event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)verticalFeedEventNameWithEvent:(enum VerticalFeedEvent)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum VerticalFeedGroupType : NSInteger;
@class VerticalFeedGroupStyle;

/// This class represents a verticalFeed group in the StorylyView.
SWIFT_CLASS_NAMED("VerticalFeedGroup")
@interface VerticalFeedGroup : NSObject
/// ID of the verticalFeed group
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the verticalFeed group
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// URL of the verticalFeed group icon image
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URL of the verticalFeed group icon video
@property (nonatomic, readonly, copy) NSURL * _Nullable iconVideoUrl;
/// URL of the verticalFeed group icon video thumbnail
@property (nonatomic, readonly, copy) NSURL * _Nullable iconVideoThumbnailUrl;
/// Order index of the verticalFeed group
@property (nonatomic, readonly) NSInteger index;
/// State of the verticalFeed group that shows whether are seen or not
@property (nonatomic, readonly) BOOL seen;
/// List of feeds in the verticalFeed group
@property (nonatomic, readonly, copy) NSArray<VerticalFeedItem *> * _Nonnull feedList;
/// Pin status of the verticalFeed group that shows whether group is pinned or not
@property (nonatomic, readonly) BOOL pinned;
/// Type of the verticalFeed group
@property (nonatomic, readonly) enum VerticalFeedGroupType type;
/// Style of this group
@property (nonatomic, readonly, strong) VerticalFeedGroupStyle * _Nullable style;
/// Name of this group
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Denotes whether verticalFeed group is nudge or not
@property (nonatomic, readonly) BOOL nudge;
/// VerticalFeedGroup initialization
/// \param id ID of the verticalFeed group
///
/// \param title Title of the verticalFeed group
///
/// \param iconUrl URL of the verticalFeed group icon image
///
/// \param thematicIconUrls URLs of different the verticalFeed group icon themes
///
/// \param index Order index of the verticalFeed group
///
/// \param seen State of the verticalFeed group that shows whether all of the stories are seen or not
///
/// \param feedList List of stories in the verticalFeed group
///
/// \param pinned Pin status of the verticalFeed group that shows whether group is pinned or not
///
/// \param type Type of the verticalFeed group
///
/// \param style Style of this group
///
/// \param name Name of this group
///
/// \param nudge Denotes whether verticalFeed group is nudge or not
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title iconUrl:(NSURL * _Nullable)iconUrl iconVideoUrl:(NSURL * _Nullable)iconVideoUrl iconVideoThumbnailUrl:(NSURL * _Nullable)iconVideoThumbnailUrl index:(NSInteger)index seen:(BOOL)seen feedList:(NSArray<VerticalFeedItem *> * _Nonnull)feedList pinned:(BOOL)pinned type:(enum VerticalFeedGroupType)type style:(VerticalFeedGroupStyle * _Nullable)style name:(NSString * _Nullable)name nudge:(BOOL)nudge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available animations that can be set for customization.
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedGroupAnimation, "VerticalFeedGroupAnimation", open) {
/// Disables animation
  VerticalFeedGroupAnimationDisabled = 0,
/// Default animation
  VerticalFeedGroupAnimationBorderRotation = 1,
};


/// This class represents a verticalFeed group’s badge style in the StorylyView.
SWIFT_CLASS_NAMED("VerticalFeedGroupBadgeStyle")
@interface VerticalFeedGroupBadgeStyle : NSObject
/// Text value of the verticalFeed group’s badge
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Text color value of the verticalFeed group’s badge
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
/// Background color value of the verticalFeed group’s badge
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// End time of the badge in timestamp format
@property (nonatomic, readonly, strong) NSNumber * _Nullable endTime;
/// Text template for the badge timestamp format
@property (nonatomic, readonly, copy, getter=template) NSString * _Nullable template_;
/// VerticalFeedGroupStyle initialization
/// \param badge Badge value of the verticalFeed group
///
- (nonnull instancetype)initWithText:(NSString * _Nullable)text textColor:(UIColor * _Nullable)textColor backgroundColor:(UIColor * _Nullable)backgroundColor endTime:(NSNumber * _Nullable)endTime template:(NSString * _Nullable)template_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents orientation of verticalFeed group list
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedGroupListOrientation, "VerticalFeedGroupListOrientation", open) {
/// Horizontal orientation of verticalFeed group list
  VerticalFeedGroupListOrientationHorizontal = 0,
/// Vertical orientation of verticalFeed group list
  VerticalFeedGroupListOrientationVertical = 1,
};

/// This enum represents available verticalFeed group sizes that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedGroupSize, "VerticalFeedGroupSize", open) {
/// Small group size which is the samllest and does not have verticalFeed group text
  VerticalFeedGroupSizeSmall = 0,
/// Large group size which is the default group size of the Storyly
  VerticalFeedGroupSizeLarge = 1,
/// Custom group size which has customizable features
  VerticalFeedGroupSizeCustom = 2,
};


/// This class represents a verticalFeed group’s style in the StorylyView.
SWIFT_CLASS_NAMED("VerticalFeedGroupStyle")
@interface VerticalFeedGroupStyle : NSObject
/// VerticalFeed Group’s Borders’ unseen color list of the verticalFeed group
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable borderUnseenColors;
/// VerticalFeed Group’s Text’s unseen color of the verticalFeed group
@property (nonatomic, readonly, strong) UIColor * _Nullable textUnseenColor;
/// Badge value of the verticalFeed group
@property (nonatomic, readonly, strong) VerticalFeedGroupBadgeStyle * _Nullable badge;
/// VerticalFeedGroupStyle initialization
/// \param badge Badge value of the verticalFeed group
///
- (nonnull instancetype)initWithBorderUnseenColors:(NSArray<UIColor *> * _Nullable)borderUnseenColors textUnseenColor:(UIColor * _Nullable)textUnseenColor badge:(VerticalFeedGroupBadgeStyle * _Nullable)badge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the type of the verticalFeed group.
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedGroupType, "VerticalFeedGroupType", open) {
/// Default type for the verticalFeed group type
  VerticalFeedGroupTypeDefault = 0,
/// Denotes verticalFeed group type is Ad
  VerticalFeedGroupTypeAd = 1,
/// Denotes verticalFeed group type is Live
  VerticalFeedGroupTypeLive = 2,
/// Denotes verticalFeed group type is Product
  VerticalFeedGroupTypeAutomatedShoppable = 3,
};


/// This class represents the Image Quiz component.
SWIFT_CLASS_NAMED("VerticalFeedImageQuizComponent")
@interface VerticalFeedImageQuizComponent : VerticalFeedItemComponent
/// Title of the image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of texts of the options if exists, otherwise list of image urls of image quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// VerticalFeedImageQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the image quiz if exists
///
/// \param options List of texts of the options if exists, otherwise list of image urls of image quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this image quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nullable)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This data class represents a verticalFeed inside a verticalFeed group.
SWIFT_CLASS_NAMED("VerticalFeedItem")
@interface VerticalFeedItem : NSObject
/// ID of the verticalFeed
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the verticalFeed
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Name of the verticalFeed
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Index of the verticalFeed among other stories of the verticalFeed group
@property (nonatomic, readonly) NSInteger index;
/// State of the verticalFeed that shows whether the verticalFeed is seen or not
@property (nonatomic, readonly) BOOL seen;
/// Time of the verticalFeed that user watched
@property (nonatomic, readonly) NSInteger currentTime;
/// URL of the preview image of the verticalFeed
@property (nonatomic, copy) NSURL * _Nullable previewUrl;
/// List of verticalFeed components in the verticalFeed
@property (nonatomic, readonly, copy) NSArray<VerticalFeedItemComponent *> * _Nullable verticalFeedItemComponentList;
/// URL which the user has just interacted with
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// Related product content of interactive incase of click action
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable actionProducts;
/// VerticalFeed initialization
/// \param id ID of the verticalFeed
///
/// \param index Index of the verticalFeed among other stories of the verticalFeed group
///
/// \param title Title of the verticalFeed
///
/// \param name Name of the verticalFeed
///
/// \param seen State of the verticalFeed that shows whether the verticalFeed is seen or not
///
/// \param currentTime Time of the verticalFeed that user watched
///
/// \param previewUrl URL of the preview image of the verticalFeed
///
/// \param verticalFeedItemComponentList List of verticalFeed components in the verticalFeed
///
/// \param actionUrl URL which the user has just interacted with
///
/// \param products Related product content of interactive incase of click action
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id index:(NSInteger)index title:(NSString * _Nonnull)title name:(NSString * _Nullable)name seen:(BOOL)seen currentTime:(NSInteger)currentTime previewUrl:(NSURL * _Nullable)previewUrl verticalFeedItemComponentList:(NSArray<VerticalFeedItemComponent *> * _Nullable)verticalFeedItemComponentList actionUrl:(NSString * _Nullable)actionUrl actionProducts:(NSArray<STRProductItem *> * _Nullable)actionProducts OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This enum represents the type of the interactive components.
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedItemComponentType, "VerticalFeedItemComponentType", open) {
/// Undefined component type
  VerticalFeedItemComponentTypeUndefined = 0,
/// Denotes the type of the component is Quiz
  VerticalFeedItemComponentTypeQuiz = 1,
/// Denotes the type of the component is Poll
  VerticalFeedItemComponentTypePoll = 2,
/// Denotes the type of the component is Emoji
  VerticalFeedItemComponentTypeEmoji = 3,
/// Denotes the type of the component is Rating
  VerticalFeedItemComponentTypeRating = 4,
/// Denotes the type of the component is PromoCode
  VerticalFeedItemComponentTypePromoCode = 5,
/// Denotes the type of the component is SwipeAction
  VerticalFeedItemComponentTypeSwipeAction = 6,
/// Denotes the type of the component is ButtonAction
  VerticalFeedItemComponentTypeButtonAction = 7,
/// Denotes the type of the component is Text
  VerticalFeedItemComponentTypeText = 8,
/// Denotes the type of the component is Image
  VerticalFeedItemComponentTypeImage = 9,
/// Denotes the type of the component is Countdown
  VerticalFeedItemComponentTypeCountdown = 10,
/// Denotes the type of the component is ProductTag
  VerticalFeedItemComponentTypeProductTag = 11,
/// Denotes the type of the component is ProductCard
  VerticalFeedItemComponentTypeProductCard = 12,
/// Denotes the type of the component is ProductList
  VerticalFeedItemComponentTypeProductCatalog = 13,
/// Denotes the type of the component is Comment
  VerticalFeedItemComponentTypeComment = 14,
/// Denotes the type of the component is Video
  VerticalFeedItemComponentTypeVideo = 15,
/// Denotes the type of the component is LongVideo
  VerticalFeedItemComponentTypeLongVideo = 16,
/// Denotes the type of the component is Link CTA
  VerticalFeedItemComponentTypeLinkCTA = 17,
/// Denotes the type of the component is Image Quiz
  VerticalFeedItemComponentTypeImageQuiz = 18,
};


/// This class does the enum to string conversion of the VerticalFeed Component
SWIFT_CLASS_NAMED("VerticalFeedItemComponentTypeHelper")
@interface VerticalFeedItemComponentTypeHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)verticalFeedItemComponentNameWithComponentType:(enum VerticalFeedItemComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Poll component.
SWIFT_CLASS_NAMED("VerticalFeedPollComponent")
@interface VerticalFeedPollComponent : VerticalFeedItemComponent
/// Title of the poll if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the poll
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// VerticalFeedPollComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the poll if exists
///
/// \param options List of options in the poll
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this poll if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the ProductCard component.
SWIFT_CLASS_NAMED("VerticalFeedProductCardComponent")
@interface VerticalFeedProductCardComponent : VerticalFeedItemComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// VerticalFeedProductCardComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for ProductCard component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the ProductCatalog component.
SWIFT_CLASS_NAMED("VerticalFeedProductCatalogComponent")
@interface VerticalFeedProductCatalogComponent : VerticalFeedItemComponent
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable actionUrlList;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// VerticalFeedProductCatalogComponent initialization
/// \param id Id of the interactive component
///
/// \param actionUrlLList action url list assigned to the interactive component
///
/// \param customPayload Custom payload for ProductCatalog component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id actionUrlList:(NSArray<NSString *> * _Nullable)actionUrlList products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the ProductTag component.
SWIFT_CLASS_NAMED("VerticalFeedProductTagComponent")
@interface VerticalFeedProductTagComponent : VerticalFeedItemComponent
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// VerticalFeedProductTagComponent initialization
/// \param id Id of the interactive component
///
/// \param actionUrl action url assigned to the interactive component
///
/// \param customPayload Custom payload for ProductTag component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the PromoCode component.
SWIFT_CLASS_NAMED("VerticalFeedPromoCodeComponent")
@interface VerticalFeedPromoCodeComponent : VerticalFeedItemComponent
/// PromoCode text that the user copied
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// VerticalFeedRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param text PromoCode text that the user copied
///
/// \param customPayload Custom payload for PromoCode component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Quiz component.
SWIFT_CLASS_NAMED("VerticalFeedQuizComponent")
@interface VerticalFeedQuizComponent : VerticalFeedItemComponent
/// Title of the quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// VerticalFeedQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the quiz if exists
///
/// \param options List of options in the quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Rating component.
SWIFT_CLASS_NAMED("VerticalFeedRatingComponent")
@interface VerticalFeedRatingComponent : VerticalFeedItemComponent
/// Emoji code as the thumb emoji
@property (nonatomic, readonly, copy) NSString * _Nonnull emojiCode;
/// Rating value which user rated in the component
@property (nonatomic, readonly) NSInteger rating;
/// VerticalFeedRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCode Emoji code as the thumb emoji
///
/// \param rating Rating value which user rated in the component
///
/// \param customPayload Custom payload for this rating if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCode:(NSString * _Nonnull)emojiCode rating:(NSInteger)rating customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Swipe component.
SWIFT_CLASS_NAMED("VerticalFeedSwipeComponent")
@interface VerticalFeedSwipeComponent : VerticalFeedItemComponent
/// text of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// action url assigned to the interactive component
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// products assigned to the interactive component
@property (nonatomic, readonly, copy) NSArray<STRProductItem *> * _Nullable products;
/// VerticalFeedSwipeComponent initialization
/// \param id Id of the interactive component
///
/// \param text text of the interactive component
///
/// \param customPayload Custom payload for Swipe component if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text actionUrl:(NSString * _Nullable)actionUrl products:(NSArray<STRProductItem *> * _Nullable)products customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the type of a verticalFeed content
typedef SWIFT_ENUM_NAMED(NSInteger, VerticalFeedType, "VerticalFeedType", open) {
/// Unidentified verticalFeed type
  VerticalFeedTypeUnknown = 0,
/// Denotes the type of the verticalFeed is Image
  VerticalFeedTypeImage = 1,
/// Denotes the type of the verticalFeed is Video
  VerticalFeedTypeVideo = 2,
/// Denotes the type of the verticalFeed is LongVideo
  VerticalFeedTypeLongVideo = 3,
/// Denotes the type of the verticalFeed is Live
  VerticalFeedTypeLive = 4,
/// Denotes the type of the verticalFeed is an Ad View
  VerticalFeedTypeAd = 5,
};


SWIFT_PROTOCOL_NAMED("XamarinStoryGroup")
@protocol XamarinStoryGroup
/// <ul>
///   <li>
///     This function is called when a new view is requested
///   </li>
/// </ul>
- (UIView * _Nonnull)createView SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     This function fills the StoryGroupView components
///   </li>
/// </ul>
- (void)populateView:(StoryGroup * _Nullable)storyGroup;
@end


SWIFT_CLASS_NAMED("XamarinStoryGroupView")
@interface XamarinStoryGroupView : StoryGroupView
- (nonnull instancetype)initWithXamarinStoryGroup:(id <XamarinStoryGroup> _Nullable)xamarinStoryGroup OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)populateView:(StoryGroup * _Nullable)storyGroup;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
